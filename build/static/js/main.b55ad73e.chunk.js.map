{"version":3,"sources":["InfoBox.js","Table.js","util.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["Infobox","title","cases","total","Card","className","CardContent","Typography","color","Table","countries","map","country","sortData","data","sortedData","sort","a","b","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","casesType","chartData","date","newDataPoint","x","y","push","LineGraph","props","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","countryInfo","setCountryInfo","tableData","setTableData","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","url","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","recovered","todayDeaths","deaths","src","alt","classType","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b55ad73e.chunk.js","sourcesContent":["import React from 'react';\nimport './InfoBox.css';\nimport {Card, CardContent, Typography} from '@material-ui/core';\n\n\nfunction Infobox({title, cases, total}) {\n    return (\n        <Card className=\"infoBox\">\n            <CardContent>\n                <Typography \n                className=\"infoBox__title\" \n                color=\"textSecondary\">\n                    {title}\n                </Typography>\n\n                <h2 className=\"infoBox__cases\">\n                    {cases}\n                </h2>\n\n                <Typography \n                className=\"infoBox__total\" \n                color=\"textSecondary\">\n                    {total} Total\n                </Typography>\n                    \n            </CardContent>\n        </Card>\n    )\n}\n\nexport default Infobox\n","import React from 'react';\nimport './Table.css';\n\nfunction Table({ countries }) {\n    return (\n        <div className=\"table\">\n            {countries.map(({country, cases}) => (\n                <tr>\n                    <td>{country}</td>\n                    <td>\n                        <strong>\n                            {cases}\n                        </strong>\n                    </td>\n                </tr>\n            ))}\n            \n        </div>\n    );\n}\n\nexport default Table\n","import numeral from 'numeral'\n\nexport const sortData = (data) => {\n    const sortedData = [...data];\n\n    sortedData.sort((a, b) => {\n        if (a.cases > b.cases){\n            return -1;\n        }else{\n            return 1;\n        }\n    })\n    return sortedData\n}\n\nexport const prettyPrintStat = (stat) => stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n    legend: {\n        display: false,\n    },\n    elements: {\n        point: {\n            radius: 2,\n        },\n    },\n    maintainAspectRatio: true,\n    tooltips: {\n        mode: \"index\",\n        intersect: false,\n        callbacks: {\n            label: function (tooltipItem, data) {\n                return numeral(tooltipItem.value).format(\"+0,0\");\n            },\n        },\n    },\n    scales: {\n        xAxes: [\n        {\n            type: \"time\",\n            time: {\n                format: \"MM/DD/YY\",\n                tooltipFormat: \"ll\",\n            },\n        },\n    ],\n        yAxes: [\n        {\n            gridLines: {\n                display: false,\n            },\n            ticks: {\n                callback: function (value, index, values) {\n                    return numeral(value).format(\"0a\");\n                },\n                },\n            },\n        ],\n    },\n};\n\nconst buildChartData = (data, casesType = 'cases') => {\n    let chartData = [];\n    let lastDataPoint;\n    for (let date in data.cases) {\n        if (lastDataPoint) {\n            let newDataPoint = {\n                x: date,\n                y: data[casesType][date] - lastDataPoint,\n            };\n            chartData.push(newDataPoint);\n        }\n        lastDataPoint = data[casesType][date];\n    }\n    return chartData;\n};\n\nfunction LineGraph({ casesType='cases', ...props }) {\n    const [data, setData] = useState({});\n\n    useEffect(() => {\n    const fetchData = async () => {\n        await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => {\n            return response.json();\n        })\n        .then((data) => {\n            let chartData = buildChartData(data, casesType);\n            setData(chartData);\n            console.log(chartData);\n        });\n    };\n\n    fetchData();\n    }, [casesType]);\n\n    return (\n    <div className={props.className}>\n        {data?.length > 0 && (\n        <Line\n            data={{\n                datasets: [\n                {\n                    backgroundColor: \"RGB(0, 161, 126)\",\n                    borderColor: \"#00A17E\",\n                    data: data,\n                },\n                ],\n            }}\n            options={options}\n        />\n        )}\n    </div>\n    );\n}\n\nexport default LineGraph;","import React, { useState, useEffect, useRef, useMemo } from 'react';\nimport './App.css';\nimport {MenuItem, FormControl, Select, Card, CardContent} from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport Table from './Table';\nimport { sortData } from './util';\nimport LineGraph from './LineGraph';\n\nfunction App() {\n\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n    .then((response) => response.json())\n    .then((data) => {\n      setCountryInfo(data);\n    });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch (\"https://disease.sh/v3/covid-19/countries?yesterday=-&twoDaysAgo=-&sort=-&allowNull=-\")\n      .then((response) => response.json())\n      .then((data) => {\n        const countries = data.map((country) => (\n          {\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }\n        ));\n\n        const sortedData = sortData(data);\n        setTableData(sortedData);\n        setCountries(countries);\n      })\n    }\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async(event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n\n    const url = countryCode === 'worldwide' \n    ? 'https://disease.sh/v3/covid-19/all' \n    : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n    .then(response => response.json())\n    .then((data) => {\n      setCountryInfo(data);\n    })\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n      <div className=\"app__header\">\n      <h1>COVID-19 Tracker</h1>\n        <FormControl className=\"app__dropdown\">\n        <Select\n          className=\"app__dropdown\"\n          variant=\"outlined\"\n          onChange={onCountryChange}\n          value={country}\n        >\n          \n          <MenuItem  value=\"worldwide\">Worldwide</MenuItem>\n          {\n            countries.map(country => (\n              <MenuItem value={country.value}>{country.name}</MenuItem>\n            ))\n          }\n        </Select>\n      </FormControl>\n      </div>\n      \n      <div className=\"app__stats\">\n        <InfoBox \n        className=\"app__infoBox\"\n        title=\"Coronavirus Cases\" \n        cases={countryInfo.todayCases}\n        total={countryInfo.cases}\n        />\n\n        <InfoBox \n        title=\"Recovered\" \n        cases={countryInfo.todayRecovered} \n        total={countryInfo.recovered}\n        />\n\n        <InfoBox \n        title=\"Deaths\" \n        cases={countryInfo.todayDeaths} \n        total={countryInfo.deaths}\n        />\n      </div>\n\n      <h5 className=\"app__statswarning\">The today cases data of some \n        country may be zero due to the\n        non updated value of today's data\n        in the respective time zones</h5>\n\n        <img \n        className=\"app__image\"\n        src=\"https://media1.tenor.com/images/ed7cffc243c6a6ffe63058e79d1ea0ac/tenor.gif?itemid=16735375\"\n        alt=\"\"\n        />\n\n      {/* <Map /> */}\n    </div>\n\n    <Card className=\"app__right\">\n      <CardContent>\n        <h3>Live cases by country</h3>\n        <Table  countries={tableData} />\n        <h3 classType=\"app__graphheading\">Worldwide new cases</h3>\n        <LineGraph />\n      </CardContent>\n    </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}